###################################################
# Scheller Cyber Security
# Penetration Testing Tool
#
# Author: Derek M Scheller Jr
# Version: 1
# OS: ParrotOS
#
# Remarks:
# 16 Aug 17 - Barebones GUI, menus incomplete, no working scripts embeded yet
# 17 Aug 17 - Added links for sites that help with passive scanning
#             Whois script running though not complete, next rev will have output to file
#             Commands that open a new terminal window only work with mate-terminal
#
####################################################

from Tkinter import *
from PIL import Image, ImageTk
import os, sys
import time
import subprocess
import webbrowser

# Root Window configuration
root = Tk()
root.title("SCS PenTest Tool")
root.geometry("500x500")
root.resizable(0, 0)

# Image configuration
path = './SCSBanner.jpg'
path2 = './SCSLogo2.png'
banner = ImageTk.PhotoImage(Image.open(path).resize((500, 200)))
logo = ImageTk.PhotoImage(Image.open(path2).resize((250, 200)))

# Top Panel
panel = Label(root, image = banner)
panel.pack(side = "top", fill = "both", expand = "no")

# Bottom Panel
panel2 = Label(root, image = logo, bg = 'black')
panel2.pack(side = "bottom", fill='both', expand='yes')

# Exploit Menu Functions
def postgre():
    subprocess.call(['mate-terminal', '-e', 'service', 'postgresql', 'start'])
def meta():
    subprocess.call(['mate-terminal', '-e', 'msfconsole'])
def rootsu():
    subprocess.call('su')

# Passive Scanning Menu Functions
def netcraftscript():
    webbrowser.open_new(r"https://www.netcraft.com")
def shodanio():
    webbrowser.open_new_tab(r"https://shodan.io")
def scansio():
    webbrowser.open_new_tab(r"https://scans.io")
def whoisscript():
    whoisdomain = raw_input('What domain would you like to check?\n')
#    whoisfile = raw_input('What would you like to name the whois file?\n')
    subprocess.call(['whois', whoisdomain])
def nslookupscript():
    print "nslookup script not yet functioning"

# Active Scanning Menu Functions
def nmapsyn():
    print "NMAP SYN scan not yet functioning"
def nmaptcp():
    print "NMAP TCP Scan not yet functioning"
def nmaposdetect():
    print "NMAP OS Detection not yet functioning"

menubar = Menu(root)

# Recon Menu
recon = Menu(menubar, tearoff=0)
recon.choices = Menu(recon)
recon.choices.passive = Menu(recon.choices, tearoff=0) # Create Passive Menu
recon.choices.passive.add_command(label='Netcraft', command=netcraftscript)
recon.choices.passive.add_command(label='SHODAN', command=shodanio)
recon.choices.passive.dnsmining = Menu(recon.choices.passive, tearoff=0) # Create DNS Mining Menu
recon.choices.passive.dnsmining.add_command(label='Whois', command=whoisscript)
recon.choices.passive.dnsmining.add_command(label='NSLookup', command=nslookupscript)
recon.choices.passive.dnsmining.add_command(label='Scans.io', command=scansio)
recon.choices.passive.add_cascade(label='DNS Mining', menu=recon.choices.passive.dnsmining) # Add DNS Mining Menu
recon.choices.passive.add_command(label='SNMP Mining')
recon.choices.passive.add_command(label='Social Engineering')
recon.add_cascade(label="Passive", menu=recon.choices.passive) # Add Passive Recon Menu
recon.choices.active = Menu(recon.choices, tearoff=0)
recon.choices.active.add_command(label='NMAP SYN')
recon.choices.active.add_command(label='NMAP TCP w/Service Detection')
recon.choices.active.add_command(label='NMAP OS Detection')
recon.add_cascade(label='Active', menu=recon.choices.active)
recon.add_separator()
recon.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="Recon", menu=recon)


# Exploitation Menu
exploit = Menu(menubar, tearoff=0)
exploit.choices = Menu(exploit)
exploit.choices.meta = Menu(exploit.choices, tearoff=0)
exploit.choices.meta.add_command(label='Start Postgresql', command=postgre)
exploit.choices.meta.add_command(label='Start MSF Console', command=meta)
exploit.add_cascade(label="Metasploit", menu=exploit.choices.meta)
exploit.add_command(label="Python Scripts")
menubar.add_cascade(label="Exploitation", menu=exploit)

root.config(menu=menubar)

mainloop()
