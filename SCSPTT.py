###################################################
# Scheller Cyber Security
# Penetration Testing Tool
#
# Author: Derek M Scheller Jr
# Version: 1.5
# OS: Kali 2019.1
#
# Remarks:
# 16 Aug 17 - Barebones GUI, menus incomplete, no working scripts embeded yet
# 17 Aug 17 - Added links for sites that help with passive scanning
#             Whois script running though not complete, next rev will have output to file
#             Commands that open a new terminal window only work with mate-terminal
# 18 Aug 17 - Fixed whois and nslookup scripts, can now create a file and output results to the file you specify
#             Needs tweeked to parse out only the needed info
# 27 Aug 19 - Added entry box for Host/IP will be used so information doesn't need entered for every command
#
####################################################

from tkinter import *
from PIL import Image, ImageTk
import os, sys
import time
import subprocess
import webbrowser

term = ""

# Check OS For Current Terminal
def terminal_check():
    subprocess.check_output('cat', '/etc/alternatives/x-terminal-emulator')
    str.find('exec')
    return term

# Root Window configuration
root = Tk()
root.title("SCS PenTest Tool")
root.geometry("500x500")
root.resizable(0, 0)

# Image configuration
path = './SCSBanner.jpg'
path2 = './SCSLogo2.png'
banner = ImageTk.PhotoImage(Image.open(path).resize((500, 200)))
logo = ImageTk.PhotoImage(Image.open(path2).resize((250, 300)))

# Top Panel
panel = Label(root, image = banner)
panel.pack(side = "top", fill = "both", expand = "no")

# Bottom Panel, Gather Host Information
panel2 = Label(root, bg = 'black')
panel2.pack(side = "bottom", fill='both', expand='yes')
host_id = Label(root, text = 'Host IP/Domain:')
host_id.pack()
host_id_text_box = Entry(root, bd=1)
host_id_text_box.pack()


# Exploit Menu Functions
def postgre():
    subprocess.call(['service postgresql start'])
def meta():
    subprocess.call(['mate-terminal', '-e', 'msfconsole'])
def rootsu():
    subprocess.call('su')

# Passive Scanning Menu Functions
def netcraftscript():
    webbrowser.open_new(r"https://www.netcraft.com")

def shodanio():
    webbrowser.open_new_tab(r"https://shodan.io")

def scansio():
    webbrowser.open_new_tab(r"https://scans.io")

def whoisscript():
    whoisdomain = host_id_text_box.get() # Variable that stores what domain you want to search
    whoisfile = open(whoisdomain + '_whois', "a+") # Open/Create file you choose
    subprocess.call(["whois", whoisdomain], stdout=whoisfile) # Call whois and send output to designated file
    whoisfile.close()

def nslookupscript():
    nslookupdom = host_id_text_box.get() # Variable that stores what domain to run nslookup on
    nslookupfile = open(nslookupdom + '_nslookup', "a+") # Open/Create file you choose
    subprocess.call(["nslookup", nslookupdom], stdout=nslookupfile) # Call nslookup and send output to designated file
    nslookupfile.close()

# Active Scanning Menu Functions
def nmapsyn():
    nmap_target = host_id_text_box.get() # Variable that stores what domain to run nmap on
    nmaplookupfile = open(nmap_target + '_nmapsyn', "a+") # Open/Create file you choose
    subprocess.call(['nmap', '-sS', nmap_target], stdout=nmaplookupfile) # Call nmap syn scan and send output to designated file
    nmaplookupfile.close()
    print "NMAP SYN scan in testing"
def nmaptcp():
    print "NMAP TCP Scan not yet functioning"
def nmaposdetect():
    print "NMAP OS Detection not yet functioning"

menubar = Menu(root)

# Recon Menu
recon = Menu(menubar, tearoff=0)
recon.choices = Menu(recon)
recon.choices.passive = Menu(recon.choices, tearoff=0) # Create Passive Menu
recon.choices.passive.add_command(label='Netcraft', command = netcraftscript)
recon.choices.passive.add_command(label='SHODAN', command = shodanio)
recon.choices.passive.dnsmining = Menu(recon.choices.passive, tearoff=0) # Create DNS Mining Menu
recon.choices.passive.dnsmining.add_command(label='Whois', command = whoisscript)
recon.choices.passive.dnsmining.add_command(label='NSLookup', command = nslookupscript)
recon.choices.passive.dnsmining.add_command(label='Scans.io', command = scansio)
recon.choices.passive.add_cascade(label='DNS Mining', menu = recon.choices.passive.dnsmining) # Add DNS Mining Menu
recon.choices.passive.add_command(label='SNMP Mining')
recon.choices.passive.add_command(label='Social Engineering')
recon.add_cascade(label="Passive", menu=recon.choices.passive) # Add Passive Recon Menu
recon.choices.active = Menu(recon.choices, tearoff=0)
recon.choices.active.add_command(label='NMAP SYN', command = nmapsyn)
recon.choices.active.add_command(label='NMAP TCP w/Service Detection', command = nmaptcp)
recon.choices.active.add_command(label='NMAP OS Detection', command = nmaposdetect)
recon.add_cascade(label='Active', menu=recon.choices.active)
recon.add_separator()
recon.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="Recon", menu=recon)


# Exploitation Menu
exploit = Menu(menubar, tearoff=0)
exploit.choices = Menu(exploit)
exploit.choices.meta = Menu(exploit.choices, tearoff=0)
exploit.choices.meta.add_command(label='Start Postgresql', command=postgre)
exploit.choices.meta.add_command(label='Start MSF Console', command=meta)
exploit.add_cascade(label="Metasploit", menu=exploit.choices.meta)
exploit.add_command(label="Python Scripts")
menubar.add_cascade(label="Exploitation", menu=exploit)

root.config(menu=menubar)

mainloop()
